  "hooks": {    "PreToolUse": [      {        "matcher": "startup",        "hooks": [          {            "type": "command",            "command": "source .claude/scripts/startup.sh"          },          {            "type": "command",            "command": "claude-statusline status"          }        ]      },      {        "matcher": "Edit",        "hooks": [          {            "type": "command",            "command": "FILE=$(cat | jq -r '.tool_input.file_path // \"\"'); if [[ -f \"$FILE\" ]]; then cp \"$FILE\" \"$FILE.backup.$(date +%Y-%m-%d_%H-%M-%S.%N)\" 2>/dev/null || true; fi"          }        ]      },      {        "matcher": "*",        "hooks": [          {            "type": "command",            "command": "TOOL=$(cat | jq -r '.tool_name // \"unknown\"'); FILE=$(cat | jq -r '.tool_input.file_path // \"no file\"'); echo \"[$(date)] Tool: $TOOL | File: $FILE\" >> ~/.claude/command-log.txt"          }        ]      }    ],    "PostToolUse": [      {        "matcher": "Edit|Write",        "hooks": [          {            "type": "command",            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/check-js.sh"          }        ]      },      {        "matcher": "Edit",        "hooks": [          {            "type": "command",            "command": "FILE=$(cat | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" == *.js || \"$FILE\" == *.ts ]] && [[ -f package.json ]]; then npm test 2>/dev/null || yarn test 2>/dev/null || true; elif [[ \"$FILE\" == *.py ]] && [[ -f pytest.ini || -f setup.cfg || -f pyproject.toml ]]; then pytest \"$FILE\" 2>/dev/null || python -m pytest \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.rb ]] && [[ -f Gemfile ]]; then bundle exec rspec \"$FILE\" 2>/dev/null || true; fi"          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "FILE=$(cat | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" == *.js || \"$FILE\" == *.ts || \"$FILE\" == *.jsx || \"$FILE\" == *.tsx ]]; then npx eslint \"$FILE\" --fix 2>/dev/null || true; elif [[ \"$FILE\" == *.py ]]; then pylint \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.rb ]]; then rubocop \"$FILE\" --auto-correct 2>/dev/null || true; fi"          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "FILE=$(cat | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" == *.js || \"$FILE\" == *.ts || \"$FILE\" == *.jsx || \"$FILE\" == *.tsx || \"$FILE\" == *.json || \"$FILE\" == *.css || \"$FILE\" == *.html ]]; then npx prettier --write \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.py ]]; then black \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.go ]]; then gofmt -w \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.rs ]]; then rustfmt \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.php ]]; then php-cs-fixer fix \"$FILE\" 2>/dev/null || true; fi"          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] File modified: $CLAUDE_FILE_PATHS\" >> ~/.claude/changes.log"          }        ]      },      {        "matcher": "Write",        "hooks": [          {            "type": "command",            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] File created: $CLAUDE_FILE_PATHS\" >> ~/.claude/changes.log"          }        ]      },      {        "matcher": "Write",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"file\"' | xargs basename | xargs -I {} osascript -e 'display notification \"File created: {}\" with title \"Claude Code\" sound name \"Glass\"'"          }        ]      },      {        "matcher": "Grep",        "hooks": [          {            "type": "command",            "command": "PATTERN=$(cat | jq -r '.tool_input.pattern // \"search\"'); osascript -e \"display notification \\\"Grep completed: $PATTERN\\\" with title \\\"Claude Code\\\" sound name \\\"Tink\\\"\""          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"file\"' | xargs basename | xargs -I {} osascript -e 'display notification \"File modified: {}\" with title \"Claude Code\" sound name \"Pop\"'"          }        ]      },      {        "matcher": "Glob",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Glob search completed\" with title \"Claude Code\" sound name \"Ping\"'"          }        ]      },      {        "matcher": "Task",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Sub-Agent Task completed\" with title \"Claude Code\" sound name \"Hero\"'"          }        ]      },      {        "matcher": "WebFetch",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.url // \"unknown URL\"' | awk -F'/' '{print $3}' | xargs -I {} osascript -e 'display notification \"WebFetch completed: {}\" with title \"Claude Code\" sound name \"Bottle\"'"          }        ]      },      {        "matcher": "TodoWrite",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"todo file\"' | xargs basename | xargs -I {} osascript -e 'display notification \"Todo file updated: {}\" with title \"Claude Code\" sound name \"Purr\"'"          }        ]      },      {        "matcher": "NotebookRead",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"notebook\"' | xargs basename | xargs -I {} osascript -e 'display notification \"Notebook read: {}\" with title \"Claude Code\" sound name \"Frog\"'"          }        ]      },      {        "matcher": "NotebookEdit",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"notebook\"' | xargs basename | xargs -I {} osascript -e 'display notification \"Notebook edited: {}\" with title \"Claude Code\" sound name \"Funk\"'"          }        ]      },      {        "matcher": "Bash",        "hooks": [          {            "type": "command",            "command": "COMMAND=$(cat | jq -r '.tool_input.command // \"bash command\"' | head -c 50 | tr '\\n' ' '); osascript -e \"display notification \\\"Running: $COMMAND\\\" with title \\\"Claude Code\\\" sound name \\\"Tink\\\"\""          }        ]      },      {        "matcher": "mcp__context7__get-library-docs",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Context7: Library docs loaded\" with title \"Claude Code\" sound name \"Glass\"'"          }        ]      },      {        "matcher": "mcp__sequential-thinking__sequentialthinking",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Sequential Thinking completed\" with title \"Claude Code\" sound name \"Purr\"'"          }        ]      },      {        "matcher": "Read",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"file\"' | xargs basename | xargs -I {} osascript -e 'display notification \"Read: {}\" with title \"Claude Code\" sound name \"Pop\"'"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__track_progress",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Memory: Progress tracked\" with title \"Claude Code\" sound name \"Tink\"'"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__log_decision",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Memory: Decision logged\" with title \"Claude Code\" sound name \"Bottle\"'"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__update_active_context",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Memory: Context updated\" with title \"Claude Code\" sound name \"Ping\"'"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__write_memory_bank_file",        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Memory: File written\" with title \"Claude Code\" sound name \"Frog\"'"          }        ]      }    ],    "Stop": [      {        "hooks": [          {            "type": "command",            "command": "osascript -e 'display notification \"Awaiting your input\" with title \"Claude Code\" sound name \"Hero\"'"          }        ]      }    ]  },