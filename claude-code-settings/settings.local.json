{  "cleanupPeriodDays": 365,  "env": {    "USE_BUILTIN_RIPGREP": "1",    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "1",    "CLAUDE_CODE_DISABLE_TERMINAL_TITLE": "0"  },  "includeCoAuthoredBy": false,  "permissions": {    "allow": [      "Gh issue create",      "Gh label create",      "WebFetch",      "Puppeteer*",      "Playwright*",      "Gh auth status",      "Bash(npm run format:*)",      "Bash(npm run lint:*)",      "Bash(npm run quality:*)",      "Bash(npm run test:*)",      "Bash(npx prettier:*)",      "Bash(pip3 index:*)",      "Bash(pipx run:*)",      "Bash(pytest:*)",      "Bash(rg:*)"    ],    "deny": [      "Read(./secrets/**)"    ]  },  "model": "opus",  "enabledMcpjsonServers": [    "python-sdk",    "sequential-thinking",    "browser-server",    "browserbase",    "playwright",    "msql",    "postgresql",    "context7",    "github",    "DeepGraph TypeScript MCP"  ],  "disabledMcpjsonServers": [    "web-scraper",    "system-admin",    "fetch",    "network-tools",    "memory"  ],  "hooks": {    "PreToolUse": [      {        "matcher": "Edit",        "hooks": [          {            "type": "command",            "command": "if [[ -f \"$CLAUDE_TOOL_FILE_PATH\" ]]; then cp \"$CLAUDE_TOOL_FILE_PATH\" \"$CLAUDE_TOOL_FILE_PATH.backup.$(date +%s)\" 2>/dev/null || true; fi"          }        ]      },      {        "matcher": "*",        "hooks": [          {            "type": "command",            "command": "echo \"[$(date)] Tool: $CLAUDE_TOOL_NAME | File: $CLAUDE_TOOL_FILE_PATH\" >> ~/.claude/command-log.txt"          }        ]      }    ],    "PostToolUse": [      {	  "matcher": "Edit|Write",	  "hooks": [	    {	      "type": "command",	      "command": "FILE=$(cat | jq -r '.tool_input.file_path // \"\"'); if echo \"$FILE\" | grep -E '\\.(ts|tsx|js|jsx)$|package\\.json$|tsconfig\\.json$' > /dev/null; then echo \"⚡ Checking TypeScript compilation for $(basename \"$FILE\")...\"; npx tsc --noEmit --skipLibCheck 2>&1 | head -15; if [ ${PIPESTATUS[0]} -ne 0 ]; then echo \"\"; echo \"❌ TypeScript compilation failed. Please fix the errors above before continuing.\"; exit 2; fi; echo \"✅ TypeScript check passed\"; fi"	    }	  ]	},    {        "matcher": "Edit",        "hooks": [          {            "type": "command",            "command": "FILE=$(cat | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" == *.js || \"$FILE\" == *.ts ]] && [[ -f package.json ]]; then npm test 2>/dev/null || yarn test 2>/dev/null || true; elif [[ \"$FILE\" == *.py ]] && [[ -f pytest.ini || -f setup.cfg || -f pyproject.toml ]]; then pytest \"$FILE\" 2>/dev/null || python -m pytest \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.rb ]] && [[ -f Gemfile ]]; then bundle exec rspec \"$FILE\" 2>/dev/null || true; fi"          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "FILE=$(cat | jq -r '.tool_input.file_path // \"\"'); if [[ \"$FILE\" == *.js || \"$FILE\" == *.ts || \"$FILE\" == *.jsx || \"$FILE\" == *.tsx ]]; then npx eslint \"$FILE\" --fix 2>/dev/null || true; elif [[ \"$FILE\" == *.py ]]; then pylint \"$FILE\" 2>/dev/null || true; elif [[ \"$FILE\" == *.rb ]]; then rubocop \"$FILE\" --auto-correct 2>/dev/null || true; fi"          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] File modified: $CLAUDE_FILE_PATHS\" >> ~/.claude/changes.log"          }        ]      },      {        "matcher": "Write",        "hooks": [          {            "type": "command",            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] File created: $CLAUDE_FILE_PATHS\" >> ~/.claude/changes.log"          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] File modified: $CLAUDE_FILE_PATHS\" >> ~/.claude/changes.log"          }        ]      },      {        "matcher": "Write",        "hooks": [          {            "type": "command",            "command": "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] File created: $CLAUDE_FILE_PATHS\" >> ~/.claude/changes.log"          }        ]      },      {        "matcher": "Write",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"file\"' | xargs basename | xargs -I {} osascript -e \"display notification \\\"File created: {}\\\" with title \\\"Claude Code\\\" sound name \\\"Glass\\\"\""          }        ]      },{  "matcher": "Grep",  "hooks": [    {      "type": "command",      "command": "cat | jq -r '.tool_input.pattern // \"search\"' | xargs -I {} osascript -e \"display notification \\\"Grep completed: {}\\\" with title \\\"Claude Code\\\" sound name \\\"Tink\\\"\""    }  ]},      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"file\"' | xargs basename | xargs -I {} osascript -e \"display notification \\\"File modified: {}\\\" with title \\\"Claude Code\\\" sound name \\\"Pop\\\"\""          }        ]      },      {        "matcher": "Glob",        "hooks": [          {            "type": "command",            "command": "osascript -e \"display notification \\\"Glob search completed\\\" with title \\\"Claude Code\\\" sound name \\\"Ping\\\"\""          }        ]      },      {        "matcher": "Task",        "hooks": [          {            "type": "command",            "command": "osascript -e \"display alert \\\"Claude Code\\\" message \\\"Sub-Agent Task completed\\\" sound name \\\"Hero\\\"\""          }        ]      },{  "matcher": "WebFetch",  "hooks": [    {      "type": "command",      "command": "cat | jq -r '.tool_input.url // \"unknown URL\"' | sed 's|https\\?://||' | sed 's|/.*||' | xargs -I {} osascript -e \"display notification \\\"WebFetch completed: {}\\\" with title \\\"Claude Code\\\" sound name \\\"Bottle\\\"\""    }  ]},      {        "matcher": "TodoWrite",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"todo file\"' | xargs basename | xargs -I {} osascript -e \"display notification \\\"Todo file updated: {}\\\" with title \\\"Claude Code\\\" sound name \\\"Purr\\\"\""          }        ]      },      {        "matcher": "NotebookRead",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"notebook\"' | xargs basename | xargs -I {} osascript -e \"display notification \\\"Notebook read: {}\\\" with title \\\"Claude Code\\\" sound name \\\"Frog\\\"\""          }        ]      },      {        "matcher": "NotebookEdit",        "hooks": [          {            "type": "command",            "command": "cat | jq -r '.tool_input.file_path // \"notebook\"' | xargs basename | xargs -I {} osascript -e \"display notification \\\"Notebook edited: {}\\\" with title \\\"Claude Code\\\" sound name \\\"Funk\\\"\""          }        ]      },      {        "matcher": "mcp__context7__get-library-docs",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Context7: Get Library Docs completed\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Context7: Get Library Docs completed\"; fi"          }        ]      },      {        "matcher": "mcp__sequential-thinking__sequentialthinking",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Sequential Thinking: Thoughts completed\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Context7: Get Library Docs completed\"; fi"          }        ]      },      {        "matcher": "_Read",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Tool: Read completed\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Tool: Read completed\"; fi"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__track_progress",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Memory: Progress tracked\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Memory: Progress tracked\"; fi"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__log_decision",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Memory: Decision logged\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Memory: Decision logged\"; fi"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__update_active_context",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Memory: Context updated\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Memory: Context updated\"; fi"          }        ]      },      {        "matcher": "mcp__memory-bank-mcp__write_memory_bank_file",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Memory: File written\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Memory: File written\"; fi"          }        ]      },      {        "matcher": "Edit|MultiEdit",        "hooks": [          {            "type": "command",            "command": "if [[ \"$CLAUDE_TOOL_FILE_PATH\" == *.js || \"$CLAUDE_TOOL_FILE_PATH\" == *.ts || \"$CLAUDE_TOOL_FILE_PATH\" == *.jsx || \"$CLAUDE_TOOL_FILE_PATH\" == *.tsx || \"$CLAUDE_TOOL_FILE_PATH\" == *.json || \"$CLAUDE_TOOL_FILE_PATH\" == *.css || \"$CLAUDE_TOOL_FILE_PATH\" == *.html ]]; then npx prettier --write \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; elif [[ \"$CLAUDE_TOOL_FILE_PATH\" == *.py ]]; then black \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; elif [[ \"$CLAUDE_TOOL_FILE_PATH\" == *.go ]]; then gofmt -w \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; elif [[ \"$CLAUDE_TOOL_FILE_PATH\" == *.rs ]]; then rustfmt \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; elif [[ \"$CLAUDE_TOOL_FILE_PATH\" == *.php ]]; then php-cs-fixer fix \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; fi"          }        ]      }    ],    "Stop": [      {        "matcher": "Stop",        "hooks": [          {            "type": "command",            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Awaiting your input\" with title \"Claude Code: Completed\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Completed\"; fi"          }        ]      }    ],    "Notification": [      {        "matcher": "Stop",        "hooks": [          {            "type": "command",            "command": "osascript -e 'beep 1' && notify-send 'Claude Code' 'Awaiting your input'"          }        ]      }    ]  },  "statusLine": {    "type": "command",    "command": "claude-statusline status"  },  "verbose": true}